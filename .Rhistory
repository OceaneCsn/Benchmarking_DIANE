net <- read.csv("data/network_edges_d0.03_lfc_1.5.csv")
View(net)
tfs <- net$from[!stringr::str_detect(net$from, "mean_")]
tfs <- unique(net$from[!stringr::str_detect(net$from, "mean_")])
grouped_tfs <- unique(net$from[stringr::str_detect(net$from, "mean_")])
grouped_tfs
strsplit(grouped_tfs[1], '-')
strsplit(stringr::str_remove(grouped_tfs[1], '-'))
strsplit(stringr::str_remove(grouped_tfs[1], '-'), "mean")
strsplit(stringr::str_remove(grouped_tfs[1], "mean"), '-'))
strsplit(stringr::str_remove(grouped_tfs[1], "mean"), '-')
strsplit(stringr::str_remove(grouped_tfs, "mean_"), '-')
unlist(strsplit(stringr::str_remove(grouped_tfs, "mean_"), '-'))
ungrouped_tfs <- unique(unlist(strsplit(stringr::str_remove(grouped_tfs, "mean_"), '-')))
regulators <- c(tfs, ungrouped_tfs)
targets <- unique(net$to[!stringr::str_detect(net$to, "mean_")])
grouped_targets <- unique(net$to[stringr::str_detect(net$to, "mean_")])
ungrouped_targets <- unique(unlist(strsplit(stringr::str_remove(grouped_targets, "mean_"), '-')))
genes <- c(targets, ungrouped_targets)
DEGs <- read.csv("data/DEGs_M-MH.csv")
DEGs <- read.csv("data/DEGs_M-MH.csv", sep = ';')
View(DEGs)
genes <- stringr::str_remove(DEGs$Gene_ID, '\\.[[digit]]')
stringr::str_remove(DEGs$Gene_ID, '\\.[[:digit]]')
stringr::str_remove(DEGs$Gene_ID, '\\.[[::digit]]')
DEGs$Gene_ID
tcc_object <- DIANE::normalize(abiotic_stresses$raw_counts, norm_method = 'tmm', abiotic_stresses$conditions, iteration = FALSE)
library(DIANE)
data("abiotic_stresses")
data("gene_annotations")
data("regulators_per_organism")
tcc_object <- DIANE::normalize(abiotic_stresses$raw_counts, norm_method = 'tmm', abiotic_stresses$conditions, iteration = FALSE)
threshold = 10*length(abiotic_stresses$conditions)
tcc_object <- DIANE::filter_low_counts(tcc_object, threshold)
normalized_counts <- TCC::getNormalizedData(tcc_object)
fit <- DIANE::estimateDispersion(tcc = tcc_object, conditions = abiotic_stresses$conditions)
tcc_object <- DIANE::normalize(abiotic_stresses$raw_counts,
norm_method = 'none',
abiotic_stresses$conditions, iteration = FALSE)
tcc_object <- list(counts = abiotic_stresses$raw_counts)
threshold = 10*length(abiotic_stresses$conditions)
tcc_object <- DIANE::filter_low_counts(tcc_object, threshold)
library(DIANE)
data("abiotic_stresses")
data("gene_annotations")
data("regulators_per_organism")
tcc_object <- list(counts = abiotic_stresses$raw_counts)
threshold = 10*length(abiotic_stresses$conditions)
tcc_object <- DIANE::filter_low_counts(tcc_object, threshold)
tcc_object <- list(counts = abiotic_stresses$raw_counts)
threshold = 10*length(abiotic_stresses$conditions)
tcc_object$counts <- tcc_object$counts[rowSums(tcc_object$counts) > threshold,]
#tcc_object <- DIANE::filter_low_counts(tcc_object, threshold)
normalized_counts <- TCC::getNormalizedData(tcc_object)
#tcc_object <- DIANE::filter_low_counts(tcc_object, threshold)
normalized_counts <- tcc_object$counts
fit <- DIANE::estimateDispersion(tcc = tcc_object, conditions = abiotic_stresses$conditions)
topTags <- DIANE::estimateDEGs(fit, reference = "M", perturbation = "MH", p.value = 0.05, lfc = 1.5)
# adding annotations
DEgenes <- topTags$table
# adding annotations
genes <- topTags$table$genes
# adding annotations
genes <- stringr::str_split_fixed(topTags$table$genes, '\\.', 2)[,1]
tfs <- intersect(genes, regulators_per_organism$`Arabidopsis thaliana`)
targets <- genes
library(DIANE)
data("abiotic_stresses")
data("gene_annotations")
data("regulators_per_organism")
tcc_object <- list(counts = abiotic_stresses$raw_counts)
threshold = 10*length(abiotic_stresses$conditions)
tcc_object$counts <- tcc_object$counts[rowSums(tcc_object$counts) > threshold,]
normalized_counts <- tcc_object$counts
fit <- DIANE::estimateDispersion(tcc = tcc_object, conditions = abiotic_stresses$conditions)
topTags <- DIANE::estimateDEGs(fit, reference = "M", perturbation = "MH", p.value = 0.05, lfc = 1.5)
# adding annotations
genes <- stringr::str_split_fixed(topTags$table$genes, '\\.', 2)[,1]
tfs <- intersect(genes, regulators_per_organism$`Arabidopsis thaliana`)
targets <- genes
write.table(targets, quote = F, row.names = F)
write.table(head(targets), quote = F, row.names = F)
write.table(targets, file = "data/targets.csv", quote = F, row.names = F)
write.table(tfs, file = "data/tfs.csv", quote = F, row.names = F)
